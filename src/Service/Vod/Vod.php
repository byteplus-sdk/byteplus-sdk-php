<?php
# Code generated by protoc-gen-Byteplus-sdk
# source: Vod
# DO NOT EDIT!

namespace Byteplus\Service\Vod;

use Byteplus\Service\Vod\Models\Request\VodGetPrivateDrmPlayAuthRequest;
use Exception;
use Throwable;
use Byteplus\Base\V4Curl;
use Byteplus\Service\Vod\Models\Request\VodGetDirectEditProgressRequest;
use Byteplus\Service\Vod\Models\Request\VodGetDirectEditResultRequest;
use Byteplus\Service\Vod\Models\Response\VodGetDirectEditProgressResponse;
use Byteplus\Service\Vod\Models\Response\VodGetDirectEditResultResponse;
use Byteplus\Service\Vod\Models\Request\VodSubmitDirectEditTaskAsyncRequest;
use Byteplus\Service\Vod\Models\Response\VodSubmitDirectEditTaskAsyncResponse;
use Byteplus\Service\Vod\Models\Request\VodGetPlayInfoRequest;
use Byteplus\Service\Vod\Models\Response\VodGetPlayInfoResponse;
use Byteplus\Service\Vod\Models\Request\VodGetPlayInfoWithLiveTimeShiftSceneRequest;
use Byteplus\Service\Vod\Models\Response\VodGetPlayInfoWithLiveTimeShiftSceneResponse;
use Byteplus\Service\Vod\Models\Request\VodUrlUploadRequest;
use Byteplus\Service\Vod\Models\Response\VodUrlUploadResponse;
use Byteplus\Service\Vod\Models\Request\VodQueryUploadTaskInfoRequest;
use Byteplus\Service\Vod\Models\Response\VodQueryUploadTaskInfoResponse;
use Byteplus\Service\Vod\Models\Request\VodApplyUploadInfoRequest;
use Byteplus\Service\Vod\Models\Response\VodApplyUploadInfoResponse;
use Byteplus\Service\Vod\Models\Request\VodCommitUploadInfoRequest;
use Byteplus\Service\Vod\Models\Response\VodCommitUploadInfoResponse;
use Byteplus\Service\Vod\Models\Request\VodUpdateMediaInfoRequest;
use Byteplus\Service\Vod\Models\Response\VodUpdateMediaInfoResponse;
use Byteplus\Service\Vod\Models\Request\VodUpdateMediaPublishStatusRequest;
use Byteplus\Service\Vod\Models\Response\VodUpdateMediaPublishStatusResponse;
use Byteplus\Service\Vod\Models\Request\VodGetMediaInfosRequest;
use Byteplus\Service\Vod\Models\Response\VodGetMediaInfosResponse;
use Byteplus\Service\Vod\Models\Request\VodGetRecommendedPosterRequest;
use Byteplus\Service\Vod\Models\Response\VodGetRecommendedPosterResponse;
use Byteplus\Service\Vod\Models\Request\VodDeleteMediaRequest;
use Byteplus\Service\Vod\Models\Response\VodDeleteMediaResponse;
use Byteplus\Service\Vod\Models\Request\VodDeleteTranscodesRequest;
use Byteplus\Service\Vod\Models\Response\VodDeleteTranscodesResponse;
use Byteplus\Service\Vod\Models\Request\VodGetMediaListRequest;
use Byteplus\Service\Vod\Models\Response\VodGetMediaListResponse;
use Byteplus\Service\Vod\Models\Request\VodGetSubtitleInfoListRequest;
use Byteplus\Service\Vod\Models\Response\VodGetSubtitleInfoListResponse;
use Byteplus\Service\Vod\Models\Request\VodUpdateSubtitleStatusRequest;
use Byteplus\Service\Vod\Models\Response\VodUpdateSubtitleStatusResponse;
use Byteplus\Service\Vod\Models\Request\VodUpdateSubtitleInfoRequest;
use Byteplus\Service\Vod\Models\Response\VodUpdateSubtitleInfoResponse;
use Byteplus\Service\Vod\Models\Request\VodStartWorkflowRequest;
use Byteplus\Service\Vod\Models\Response\VodStartWorkflowResponse;
use Byteplus\Service\Vod\Models\Request\VodRetrieveTranscodeResultRequest;
use Byteplus\Service\Vod\Models\Response\VodRetrieveTranscodeResultResponse;
use Byteplus\Service\Vod\Models\Request\VodGetWorkflowExecutionStatusRequest;
use Byteplus\Service\Vod\Models\Response\VodGetWorkflowExecutionStatusResponse;
use Byteplus\Service\Vod\Models\Request\VodGetWorkflowResultRequest;
use Byteplus\Service\Vod\Models\Response\VodGetWorkflowResultResponse;
use Byteplus\Service\Vod\Models\Request\VodCreateSpaceRequest;
use Byteplus\Service\Vod\Models\Response\VodCreateSpaceResponse;
use Byteplus\Service\Vod\Models\Request\VodListSpaceRequest;
use Byteplus\Service\Vod\Models\Response\VodListSpaceResponse;
use Byteplus\Service\Vod\Models\Request\VodGetSpaceDetailRequest;
use Byteplus\Service\Vod\Models\Response\VodGetSpaceDetailResponse;
use Byteplus\Service\Vod\Models\Request\VodUpdateSpaceUploadConfigRequest;
use Byteplus\Service\Vod\Models\Response\VodUpdateSpaceUploadConfigResponse;
use Byteplus\Service\Vod\Models\Request\VodDescribeVodSpaceStorageDataRequest;
use Byteplus\Service\Vod\Models\Response\VodDescribeVodSpaceStorageDataResponse;
use Byteplus\Service\Vod\Models\Request\VodListDomainRequest;
use Byteplus\Service\Vod\Models\Response\VodListDomainResponse;
use Byteplus\Service\Vod\Models\Request\VodCreateCdnRefreshTaskRequest;
use Byteplus\Service\Vod\Models\Response\VodCreateCdnRefreshTaskResponse;
use Byteplus\Service\Vod\Models\Request\VodCreateCdnPreloadTaskRequest;
use Byteplus\Service\Vod\Models\Response\VodCreateCdnPreloadTaskResponse;
use Byteplus\Service\Vod\Models\Request\VodListCdnTasksRequest;
use Byteplus\Service\Vod\Models\Response\VodListCdnTasksResponse;
use Byteplus\Service\Vod\Models\Request\VodListCdnAccessLogRequest;
use Byteplus\Service\Vod\Models\Response\VodListCdnAccessLogResponse;
use Byteplus\Service\Vod\Models\Request\VodListCdnTopAccessUrlRequest;
use Byteplus\Service\Vod\Models\Response\VodListCdnTopAccessUrlResponse;
use Byteplus\Service\Vod\Models\Request\VodDescribeVodDomainBandwidthDataRequest;
use Byteplus\Service\Vod\Models\Response\VodDescribeVodDomainBandwidthDataResponse;
use Byteplus\Service\Vod\Models\Request\VodListCdnUsageDataRequest;
use Byteplus\Service\Vod\Models\Response\VodCdnStatisticsCommonResponse;
use Byteplus\Service\Vod\Models\Request\VodListCdnStatusDataRequest;
use Byteplus\Service\Vod\Models\Request\VodDescribeIPInfoRequest;
use Byteplus\Service\Vod\Models\Response\VodDescribeIPInfoResponse;
use Byteplus\Service\Vod\Models\Request\VodDescribeVodDomainTrafficDataRequest;
use Byteplus\Service\Vod\Models\Response\VodDescribeVodDomainTrafficDataResponse;
use Byteplus\Service\Vod\Models\Request\VodListCdnPvDataRequest;
use Byteplus\Service\Vod\Models\Request\VodAddCallbackSubscriptionRequest;
use Byteplus\Service\Vod\Models\Response\VodAddCallbackSubscriptionResponse;
use Byteplus\Service\Vod\Models\Request\VodSetCallbackEventRequest;
use Byteplus\Service\Vod\Models\Response\VodSetCallbackEventResponse;
use Byteplus\Service\Vod\Models\Request\DescribeVodSpaceTranscodeDataRequest;
use Byteplus\Service\Vod\Models\Response\DescribeVodSpaceTranscodeDataResponse;
use Byteplus\Service\Vod\Models\Request\DescribeVodSnapshotDataRequest;
use Byteplus\Service\Vod\Models\Response\DescribeVodSnapshotDataResponse;

/**
 * Generated from protobuf service <code>byteplus/vod/service/service_vod.proto</code>
 */
class Vod extends V4Curl
{

    protected $apiList;

    public function __construct()
    {
        $this->region = func_get_arg(0);
        $this->apiList = VodOption::$apiList;
        parent::__construct($this->region);
    }

    /**
     * @throws Exception
     */
    protected function getConfig(string $region): array
    {
        try {
            return VodOption::getConfig($region);
        } catch (Exception $e) {
            print_r($e->getMessage());
            print_r($e->getTraceAsString());
            throw $e;
        }
    }

    /**
     * @throws Throwable
     */
    public function getPlayAuthToken(VodGetPlayInfoRequest $req, int $expireSeconds): string
    {
        try {
            $query = VodUtils::formatRequestParam($req);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($expireSeconds > 0) {
            $query["X-Expires"] = $expireSeconds;
        }
        $token = ["TokenVersion" => "V2"];
        $token["GetPlayInfoToken"] = parse_url($this->getRequestUrl("GetPlayInfo", ['query' => $query]))['query'];
        return base64_encode(json_encode($token));
    }


	
    public function getUploadVideoAuth(): array
    {
        return $this->getUploadVideoAuthWithExpiredTime(60 * 60);
    }

    public function getUploadVideoAuthWithExpiredTime(int $expire): array
    {
        $actions = [ActionApplyUpload, ActionCommitUpload];
        $resources = [];
        $statement = $this->newAllowStatement($actions, $resources);
        $policy = [
            Statement => [$statement],
        ];
        return $this->signSts2($policy, $expire);
    }

	/**
     * GetPlayInfo.
     *
     * @param $req VodGetPlayInfoRequest
     * @return VodGetPlayInfoResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getPlayInfo (VodGetPlayInfoRequest $req): VodGetPlayInfoResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetPlayInfo', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetPlayInfoResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetPlayInfoWithLiveTimeShiftScene.
     *
     * @param $req VodGetPlayInfoWithLiveTimeShiftSceneRequest
     * @return VodGetPlayInfoWithLiveTimeShiftSceneResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getPlayInfoWithLiveTimeShiftScene (VodGetPlayInfoWithLiveTimeShiftSceneRequest $req): VodGetPlayInfoWithLiveTimeShiftSceneResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetPlayInfoWithLiveTimeShiftScene', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetPlayInfoWithLiveTimeShiftSceneResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * UploadMediaByUrl.
     *
     * @param $req VodUrlUploadRequest
     * @return VodUrlUploadResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function uploadMediaByUrl (VodUrlUploadRequest $req): VodUrlUploadResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('UploadMediaByUrl', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodUrlUploadResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * QueryUploadTaskInfo.
     *
     * @param $req VodQueryUploadTaskInfoRequest
     * @return VodQueryUploadTaskInfoResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function queryUploadTaskInfo (VodQueryUploadTaskInfoRequest $req): VodQueryUploadTaskInfoResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('QueryUploadTaskInfo', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodQueryUploadTaskInfoResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * ApplyUploadInfo.
     *
     * @param $req VodApplyUploadInfoRequest
     * @return VodApplyUploadInfoResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function applyUploadInfo (VodApplyUploadInfoRequest $req): VodApplyUploadInfoResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('ApplyUploadInfo', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodApplyUploadInfoResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * CommitUploadInfo.
     *
     * @param $req VodCommitUploadInfoRequest
     * @return VodCommitUploadInfoResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function commitUploadInfo (VodCommitUploadInfoRequest $req): VodCommitUploadInfoResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('CommitUploadInfo', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodCommitUploadInfoResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * UpdateMediaInfo.
     *
     * @param $req VodUpdateMediaInfoRequest
     * @return VodUpdateMediaInfoResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function updateMediaInfo (VodUpdateMediaInfoRequest $req): VodUpdateMediaInfoResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('UpdateMediaInfo', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodUpdateMediaInfoResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * UpdateMediaPublishStatus.
     *
     * @param $req VodUpdateMediaPublishStatusRequest
     * @return VodUpdateMediaPublishStatusResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function updateMediaPublishStatus (VodUpdateMediaPublishStatusRequest $req): VodUpdateMediaPublishStatusResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('UpdateMediaPublishStatus', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodUpdateMediaPublishStatusResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetMediaInfos.
     *
     * @param $req VodGetMediaInfosRequest
     * @return VodGetMediaInfosResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getMediaInfos (VodGetMediaInfosRequest $req): VodGetMediaInfosResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetMediaInfos', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetMediaInfosResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetRecommendedPoster.
     *
     * @param $req VodGetRecommendedPosterRequest
     * @return VodGetRecommendedPosterResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getRecommendedPoster (VodGetRecommendedPosterRequest $req): VodGetRecommendedPosterResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetRecommendedPoster', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetRecommendedPosterResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DeleteMedia.
     *
     * @param $req VodDeleteMediaRequest
     * @return VodDeleteMediaResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function deleteMedia (VodDeleteMediaRequest $req): VodDeleteMediaResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DeleteMedia', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodDeleteMediaResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DeleteTranscodes.
     *
     * @param $req VodDeleteTranscodesRequest
     * @return VodDeleteTranscodesResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function deleteTranscodes (VodDeleteTranscodesRequest $req): VodDeleteTranscodesResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DeleteTranscodes', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodDeleteTranscodesResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetMediaList.
     *
     * @param $req VodGetMediaListRequest
     * @return VodGetMediaListResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getMediaList (VodGetMediaListRequest $req): VodGetMediaListResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetMediaList', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetMediaListResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetSubtitleInfoList.
     *
     * @param $req VodGetSubtitleInfoListRequest
     * @return VodGetSubtitleInfoListResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getSubtitleInfoList (VodGetSubtitleInfoListRequest $req): VodGetSubtitleInfoListResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetSubtitleInfoList', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetSubtitleInfoListResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * UpdateSubtitleStatus.
     *
     * @param $req VodUpdateSubtitleStatusRequest
     * @return VodUpdateSubtitleStatusResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function updateSubtitleStatus (VodUpdateSubtitleStatusRequest $req): VodUpdateSubtitleStatusResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('UpdateSubtitleStatus', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodUpdateSubtitleStatusResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * UpdateSubtitleInfo.
     *
     * @param $req VodUpdateSubtitleInfoRequest
     * @return VodUpdateSubtitleInfoResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function updateSubtitleInfo (VodUpdateSubtitleInfoRequest $req): VodUpdateSubtitleInfoResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('UpdateSubtitleInfo', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodUpdateSubtitleInfoResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * StartWorkflow.
     *
     * @param $req VodStartWorkflowRequest
     * @return VodStartWorkflowResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function startWorkflow (VodStartWorkflowRequest $req): VodStartWorkflowResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('StartWorkflow', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodStartWorkflowResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * RetrieveTranscodeResult.
     *
     * @param $req VodRetrieveTranscodeResultRequest
     * @return VodRetrieveTranscodeResultResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function retrieveTranscodeResult (VodRetrieveTranscodeResultRequest $req): VodRetrieveTranscodeResultResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('RetrieveTranscodeResult', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodRetrieveTranscodeResultResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetWorkflowExecution.
     *
     * @param $req VodGetWorkflowExecutionStatusRequest
     * @return VodGetWorkflowExecutionStatusResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function GetWorkflowExecution (VodGetWorkflowExecutionStatusRequest $req): VodGetWorkflowExecutionStatusResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetWorkflowExecution', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetWorkflowExecutionStatusResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetWorkflowExecutionResult.
     *
     * @param $req VodGetWorkflowResultRequest
     * @return VodGetWorkflowResultResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function GetWorkflowExecutionResult (VodGetWorkflowResultRequest $req): VodGetWorkflowResultResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetWorkflowExecutionResult', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetWorkflowResultResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * CreateSpace.
     *
     * @param $req VodCreateSpaceRequest
     * @return VodCreateSpaceResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function createSpace (VodCreateSpaceRequest $req): VodCreateSpaceResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('CreateSpace', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodCreateSpaceResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * ListSpace.
     *
     * @param $req VodListSpaceRequest
     * @return VodListSpaceResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function listSpace (VodListSpaceRequest $req): VodListSpaceResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('ListSpace', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodListSpaceResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetSpaceDetail.
     *
     * @param $req VodGetSpaceDetailRequest
     * @return VodGetSpaceDetailResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getSpaceDetail (VodGetSpaceDetailRequest $req): VodGetSpaceDetailResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetSpaceDetail', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetSpaceDetailResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * UpdateSpaceUploadConfig.
     *
     * @param $req VodUpdateSpaceUploadConfigRequest
     * @return VodUpdateSpaceUploadConfigResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function updateSpaceUploadConfig (VodUpdateSpaceUploadConfigRequest $req): VodUpdateSpaceUploadConfigResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('UpdateSpaceUploadConfig', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodUpdateSpaceUploadConfigResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DescribeVodSpaceStorageData.
     *
     * @param $req VodDescribeVodSpaceStorageDataRequest
     * @return VodDescribeVodSpaceStorageDataResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function describeVodSpaceStorageData (VodDescribeVodSpaceStorageDataRequest $req): VodDescribeVodSpaceStorageDataResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DescribeVodSpaceStorageData', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodDescribeVodSpaceStorageDataResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * ListDomain.
     *
     * @param $req VodListDomainRequest
     * @return VodListDomainResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function listDomain (VodListDomainRequest $req): VodListDomainResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('ListDomain', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodListDomainResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * CreateCdnRefreshTask.
     *
     * @param $req VodCreateCdnRefreshTaskRequest
     * @return VodCreateCdnRefreshTaskResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function createCdnRefreshTask (VodCreateCdnRefreshTaskRequest $req): VodCreateCdnRefreshTaskResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('CreateCdnRefreshTask', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodCreateCdnRefreshTaskResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * CreateCdnPreloadTask.
     *
     * @param $req VodCreateCdnPreloadTaskRequest
     * @return VodCreateCdnPreloadTaskResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function createCdnPreloadTask (VodCreateCdnPreloadTaskRequest $req): VodCreateCdnPreloadTaskResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('CreateCdnPreloadTask', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodCreateCdnPreloadTaskResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * ListCdnTasks.
     *
     * @param $req VodListCdnTasksRequest
     * @return VodListCdnTasksResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function listCdnTasks (VodListCdnTasksRequest $req): VodListCdnTasksResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('ListCdnTasks', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodListCdnTasksResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * ListCdnAccessLog.
     *
     * @param $req VodListCdnAccessLogRequest
     * @return VodListCdnAccessLogResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function listCdnAccessLog (VodListCdnAccessLogRequest $req): VodListCdnAccessLogResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('ListCdnAccessLog', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodListCdnAccessLogResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * ListCdnTopAccessUrl.
     *
     * @param $req VodListCdnTopAccessUrlRequest
     * @return VodListCdnTopAccessUrlResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function listCdnTopAccessUrl (VodListCdnTopAccessUrlRequest $req): VodListCdnTopAccessUrlResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('ListCdnTopAccessUrl', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodListCdnTopAccessUrlResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DescribeVodDomainBandwidthData.
     *
     * @param $req VodDescribeVodDomainBandwidthDataRequest
     * @return VodDescribeVodDomainBandwidthDataResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function describeVodDomainBandwidthData (VodDescribeVodDomainBandwidthDataRequest $req): VodDescribeVodDomainBandwidthDataResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DescribeVodDomainBandwidthData', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodDescribeVodDomainBandwidthDataResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * ListCdnUsageData.
     *
     * @param $req VodListCdnUsageDataRequest
     * @return VodCdnStatisticsCommonResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function listCdnUsageData (VodListCdnUsageDataRequest $req): VodCdnStatisticsCommonResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('ListCdnUsageData', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodCdnStatisticsCommonResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * ListCdnStatusData.
     *
     * @param $req VodListCdnStatusDataRequest
     * @return VodCdnStatisticsCommonResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function listCdnStatusData (VodListCdnStatusDataRequest $req): VodCdnStatisticsCommonResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('ListCdnStatusData', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodCdnStatisticsCommonResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DescribeIpInfo.
     *
     * @param $req VodDescribeIPInfoRequest
     * @return VodDescribeIPInfoResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function describeIpInfo (VodDescribeIPInfoRequest $req): VodDescribeIPInfoResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DescribeIpInfo', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodDescribeIPInfoResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DescribeVodDomainTrafficData.
     *
     * @param $req VodDescribeVodDomainTrafficDataRequest
     * @return VodDescribeVodDomainTrafficDataResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function describeVodDomainTrafficData (VodDescribeVodDomainTrafficDataRequest $req): VodDescribeVodDomainTrafficDataResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DescribeVodDomainTrafficData', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodDescribeVodDomainTrafficDataResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * ListCdnPvData.
     *
     * @param $req VodListCdnPvDataRequest
     * @return VodCdnStatisticsCommonResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function listCdnPvData (VodListCdnPvDataRequest $req): VodCdnStatisticsCommonResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('ListCdnPvData', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodCdnStatisticsCommonResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * AddCallbackSubscription.
     *
     * @param $req VodAddCallbackSubscriptionRequest
     * @return VodAddCallbackSubscriptionResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function addCallbackSubscription (VodAddCallbackSubscriptionRequest $req): VodAddCallbackSubscriptionResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('AddCallbackSubscription', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodAddCallbackSubscriptionResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * SetCallbackEvent.
     *
     * @param $req VodSetCallbackEventRequest
     * @return VodSetCallbackEventResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function setCallbackEvent (VodSetCallbackEventRequest $req): VodSetCallbackEventResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('SetCallbackEvent', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodSetCallbackEventResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DescribeVodSpaceTranscodeData.
     *
     * @param $req DescribeVodSpaceTranscodeDataRequest
     * @return DescribeVodSpaceTranscodeDataResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function describeVodSpaceTranscodeData (DescribeVodSpaceTranscodeDataRequest $req): DescribeVodSpaceTranscodeDataResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DescribeVodSpaceTranscodeData', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new DescribeVodSpaceTranscodeDataResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DescribeVodSnapshotData.
     *
     * @param $req DescribeVodSnapshotDataRequest
     * @return DescribeVodSnapshotDataResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function describeVodSnapshotData (DescribeVodSnapshotDataRequest $req): DescribeVodSnapshotDataResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DescribeVodSnapshotData', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new DescribeVodSnapshotDataResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
}  // end of service
