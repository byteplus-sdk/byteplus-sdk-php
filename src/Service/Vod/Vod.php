<?php
# Code generated by protoc-gen-volcengine-sdk
# source: Vod
# DO NOT EDIT!

namespace Byteplus\Service\Vod;

use Exception;
use Throwable;
use Byteplus\Base\V4Curl;
use Byteplus\Service\Vod\Models\Request\VodGetDirectEditProgressRequest;
use Byteplus\Service\Vod\Models\Request\VodGetDirectEditResultRequest;
use Byteplus\Service\Vod\Models\Response\VodGetDirectEditProgressResponse;
use Byteplus\Service\Vod\Models\Response\VodGetDirectEditResultResponse;
use Byteplus\Service\Vod\Models\Request\VodSubmitDirectEditTaskAsyncRequest;
use Byteplus\Service\Vod\Models\Response\VodSubmitDirectEditTaskAsyncResponse;
use Byteplus\Service\Vod\Models\Request\VodGetDrmLicenseRequest;
use Byteplus\Service\Vod\Models\Response\VodGetDrmLicenseResponse;
use Byteplus\Service\Vod\Models\Request\VodGetPlayInfoRequest;
use Byteplus\Service\Vod\Models\Response\VodGetPlayInfoResponse;
use Byteplus\Service\Vod\Models\Request\VodGetPrivateDrmPlayAuthRequest;
use Byteplus\Service\Vod\Models\Response\VodGetPrivateDrmPlayAuthResponse;
use Byteplus\Service\Vod\Models\Request\VodCreateHlsDecryptionKeyRequest;
use Byteplus\Service\Vod\Models\Response\VodCreateHlsDecryptionKeyResponse;
use Byteplus\Service\Vod\Models\Request\VodGetPlayInfoWithLiveTimeShiftSceneRequest;
use Byteplus\Service\Vod\Models\Response\VodGetPlayInfoWithLiveTimeShiftSceneResponse;
use Byteplus\Service\Vod\Models\Request\VodUrlUploadRequest;
use Byteplus\Service\Vod\Models\Response\VodUrlUploadResponse;
use Byteplus\Service\Vod\Models\Request\VodQueryUploadTaskInfoRequest;
use Byteplus\Service\Vod\Models\Response\VodQueryUploadTaskInfoResponse;
use Byteplus\Service\Vod\Models\Request\VodApplyUploadInfoRequest;
use Byteplus\Service\Vod\Models\Response\VodApplyUploadInfoResponse;
use Byteplus\Service\Vod\Models\Request\VodCommitUploadInfoRequest;
use Byteplus\Service\Vod\Models\Response\VodCommitUploadInfoResponse;
use Byteplus\Service\Vod\Models\Request\VodListFileMetaInfosByFileNamesRequest;
use Byteplus\Service\Vod\Models\Response\VodListFileMetaInfosByFileNamesResponse;
use Byteplus\Service\Vod\Models\Request\VodUpdateMediaInfoRequest;
use Byteplus\Service\Vod\Models\Response\VodUpdateMediaInfoResponse;
use Byteplus\Service\Vod\Models\Request\VodUpdateMediaPublishStatusRequest;
use Byteplus\Service\Vod\Models\Response\VodUpdateMediaPublishStatusResponse;
use Byteplus\Service\Vod\Models\Request\VodUpdateMediaStorageClassRequest;
use Byteplus\Service\Vod\Models\Response\VodUpdateMediaStorageClassResponse;
use Byteplus\Service\Vod\Models\Request\VodGetMediaInfosRequest;
use Byteplus\Service\Vod\Models\Response\VodGetMediaInfosResponse;
use Byteplus\Service\Vod\Models\Request\VodGetRecommendedPosterRequest;
use Byteplus\Service\Vod\Models\Response\VodGetRecommendedPosterResponse;
use Byteplus\Service\Vod\Models\Request\VodDeleteMediaRequest;
use Byteplus\Service\Vod\Models\Response\VodDeleteMediaResponse;
use Byteplus\Service\Vod\Models\Request\VodDeleteTranscodesRequest;
use Byteplus\Service\Vod\Models\Response\VodDeleteTranscodesResponse;
use Byteplus\Service\Vod\Models\Request\VodGetFileInfosRequest;
use Byteplus\Service\Vod\Models\Response\VodGetFileInfosResponse;
use Byteplus\Service\Vod\Models\Request\VodDeleteMediaTosFileRequest;
use Byteplus\Service\Vod\Models\Response\VodDeleteMediaTosFileResponse;
use Byteplus\Service\Vod\Models\Request\VodGetMediaListRequest;
use Byteplus\Service\Vod\Models\Response\VodGetMediaListResponse;
use Byteplus\Service\Vod\Models\Request\VodGetSubtitleInfoListRequest;
use Byteplus\Service\Vod\Models\Response\VodGetSubtitleInfoListResponse;
use Byteplus\Service\Vod\Models\Request\VodUpdateSubtitleStatusRequest;
use Byteplus\Service\Vod\Models\Response\VodUpdateSubtitleStatusResponse;
use Byteplus\Service\Vod\Models\Request\VodUpdateSubtitleInfoRequest;
use Byteplus\Service\Vod\Models\Response\VodUpdateSubtitleInfoResponse;
use Byteplus\Service\Vod\Models\Request\VodCreatePlaylistRequest;
use Byteplus\Service\Vod\Models\Response\VodCreatePlaylistResponse;
use Byteplus\Service\Vod\Models\Request\VodGetPlaylistsRequest;
use Byteplus\Service\Vod\Models\Response\VodGetPlaylistsResponse;
use Byteplus\Service\Vod\Models\Request\VodUpdatePlaylistRequest;
use Byteplus\Service\Vod\Models\Response\VodUpdatePlaylistResponse;
use Byteplus\Service\Vod\Models\Request\VodDeletePlaylistRequest;
use Byteplus\Service\Vod\Models\Response\VodDeletePlaylistResponse;
use Byteplus\Service\Vod\Models\Request\VodCreateVideoClassificationRequest;
use Byteplus\Service\Vod\Models\Response\VodCreateVideoClassificationResponse;
use Byteplus\Service\Vod\Models\Request\VodUpdateVideoClassificationRequest;
use Byteplus\Service\Vod\Models\Response\VodUpdateVideoClassificationResponse;
use Byteplus\Service\Vod\Models\Request\VodDeleteVideoClassificationRequest;
use Byteplus\Service\Vod\Models\Response\VodDeleteVideoClassificationResponse;
use Byteplus\Service\Vod\Models\Request\VodListVideoClassificationsRequest;
use Byteplus\Service\Vod\Models\Response\VodListVideoClassificationsResponse;
use Byteplus\Service\Vod\Models\Request\VodListSnapshotsRequest;
use Byteplus\Service\Vod\Models\Response\VodListSnapshotsResponse;
use Byteplus\Service\Vod\Models\Request\VodStartWorkflowRequest;
use Byteplus\Service\Vod\Models\Response\VodStartWorkflowResponse;
use Byteplus\Service\Vod\Models\Request\VodRetrieveTranscodeResultRequest;
use Byteplus\Service\Vod\Models\Response\VodRetrieveTranscodeResultResponse;
use Byteplus\Service\Vod\Models\Request\VodGetWorkflowExecutionStatusRequest;
use Byteplus\Service\Vod\Models\Response\VodGetWorkflowExecutionStatusResponse;
use Byteplus\Service\Vod\Models\Request\VodCreateSpaceRequest;
use Byteplus\Service\Vod\Models\Response\VodCreateSpaceResponse;
use Byteplus\Service\Vod\Models\Request\VodListSpaceRequest;
use Byteplus\Service\Vod\Models\Response\VodListSpaceResponse;
use Byteplus\Service\Vod\Models\Request\VodGetSpaceDetailRequest;
use Byteplus\Service\Vod\Models\Response\VodGetSpaceDetailResponse;
use Byteplus\Service\Vod\Models\Request\VodUpdateSpaceUploadConfigRequest;
use Byteplus\Service\Vod\Models\Response\VodUpdateSpaceUploadConfigResponse;
use Byteplus\Service\Vod\Models\Request\VodDescribeVodSpaceStorageDataRequest;
use Byteplus\Service\Vod\Models\Response\VodDescribeVodSpaceStorageDataResponse;
use Byteplus\Service\Vod\Models\Request\VodStartDomainRequest;
use Byteplus\Service\Vod\Models\Response\VodStartDomainResponse;
use Byteplus\Service\Vod\Models\Request\VodStopDomainRequest;
use Byteplus\Service\Vod\Models\Response\VodStopDomainResponse;
use Byteplus\Service\Vod\Models\Request\VodAddDomainToSchedulerRequest;
use Byteplus\Service\Vod\Models\Response\VodAddDomainToSchedulerResponse;
use Byteplus\Service\Vod\Models\Request\VodRemoveDomainFromSchedulerRequest;
use Byteplus\Service\Vod\Models\Response\VodRemoveDomainFromSchedulerResponse;
use Byteplus\Service\Vod\Models\Request\VodUpdateDomainPlayRuleRequestRequest;
use Byteplus\Service\Vod\Models\Response\VodUpdateDomainPlayRuleResponse;
use Byteplus\Service\Vod\Models\Request\VodListDomainRequest;
use Byteplus\Service\Vod\Models\Response\VodListDomainResponse;
use Byteplus\Service\Vod\Models\Request\VodCreateCdnRefreshTaskRequest;
use Byteplus\Service\Vod\Models\Response\VodCreateCdnRefreshTaskResponse;
use Byteplus\Service\Vod\Models\Request\VodCreateCdnPreloadTaskRequest;
use Byteplus\Service\Vod\Models\Response\VodCreateCdnPreloadTaskResponse;
use Byteplus\Service\Vod\Models\Request\VodListCdnTasksRequest;
use Byteplus\Service\Vod\Models\Response\VodListCdnTasksResponse;
use Byteplus\Service\Vod\Models\Request\VodListCdnAccessLogRequest;
use Byteplus\Service\Vod\Models\Response\VodListCdnAccessLogResponse;
use Byteplus\Service\Vod\Models\Request\VodListCdnTopAccessUrlRequest;
use Byteplus\Service\Vod\Models\Response\VodListCdnTopAccessUrlResponse;
use Byteplus\Service\Vod\Models\Request\VodDescribeVodDomainBandwidthDataRequest;
use Byteplus\Service\Vod\Models\Response\VodDescribeVodDomainBandwidthDataResponse;
use Byteplus\Service\Vod\Models\Request\VodListCdnUsageDataRequest;
use Byteplus\Service\Vod\Models\Response\VodCdnStatisticsCommonResponse;
use Byteplus\Service\Vod\Models\Request\VodListCdnUsageDataDetailRequest;
use Byteplus\Service\Vod\Models\Response\VodListCdnUsageDataDetailResponse;
use Byteplus\Service\Vod\Models\Request\VodListCdnStatusDataRequest;
use Byteplus\Service\Vod\Models\Request\VodListCdnStatusDataDetailRequest;
use Byteplus\Service\Vod\Models\Response\VodListCdnStatusDataDetailResponse;
use Byteplus\Service\Vod\Models\Request\VodDescribeIPInfoRequest;
use Byteplus\Service\Vod\Models\Response\VodDescribeIPInfoResponse;
use Byteplus\Service\Vod\Models\Request\VodDescribeVodDomainTrafficDataRequest;
use Byteplus\Service\Vod\Models\Response\VodDescribeVodDomainTrafficDataResponse;
use Byteplus\Service\Vod\Models\Request\VodListCdnPvDataRequest;
use Byteplus\Service\Vod\Models\Request\VodSubmitBlockTasksRequest;
use Byteplus\Service\Vod\Models\Response\VodSubmitBlockTasksResponse;
use Byteplus\Service\Vod\Models\Request\VodGetContentBlockTasksRequest;
use Byteplus\Service\Vod\Models\Response\VodGetContentBlockTasksResponse;
use Byteplus\Service\Vod\Models\Request\VodCreateDomainV2Request;
use Byteplus\Service\Vod\Models\Response\VodCreateDomainV2Response;
use Byteplus\Service\Vod\Models\Request\VodUpdateDomainExpireV2Request;
use Byteplus\Service\Vod\Models\Response\VodUpdateDomainExpireV2Response;
use Byteplus\Service\Vod\Models\Request\AddOrUpdateCertificateV2Request;
use Byteplus\Service\Vod\Models\Response\AddOrUpdateCertificateV2Response;
use Byteplus\Service\Vod\Models\Request\VodAddCallbackSubscriptionRequest;
use Byteplus\Service\Vod\Models\Response\VodAddCallbackSubscriptionResponse;
use Byteplus\Service\Vod\Models\Request\VodSetCallbackEventRequest;
use Byteplus\Service\Vod\Models\Response\VodSetCallbackEventResponse;
use Byteplus\Service\Vod\Models\Request\DescribeVodSpaceTranscodeDataRequest;
use Byteplus\Service\Vod\Models\Response\DescribeVodSpaceTranscodeDataResponse;
use Byteplus\Service\Vod\Models\Request\DescribeVodSpaceSubtitleStatisDataRequest;
use Byteplus\Service\Vod\Models\Response\DescribeVodSpaceSubtitleStatisDataResponse;
use Byteplus\Service\Vod\Models\Request\DescribeVodSnapshotDataRequest;
use Byteplus\Service\Vod\Models\Response\DescribeVodSnapshotDataResponse;
use Byteplus\Service\Vod\Models\Request\DescribeVodSpaceStorageDataFDRequest;
use Byteplus\Service\Vod\Models\Response\DescribeVodSpaceStorageDataFDResponse;
use Byteplus\Service\Vod\Models\Request\DescribeVodEnhanceImageDataRequest;
use Byteplus\Service\Vod\Models\Response\DescribeVodEnhanceImageDataResponse;
use Byteplus\Service\Vod\Models\Request\DescribeVodPlayedStatisDataRequest;
use Byteplus\Service\Vod\Models\Response\DescribeVodPlayedStatisDataResponse;
use Byteplus\Service\Vod\Models\Request\DescribeVodMostPlayedStatisDataRequest;
use Byteplus\Service\Vod\Models\Response\DescribeVodMostPlayedStatisDataResponse;
use Byteplus\Service\Vod\Models\Request\DescribeVodRealtimeMediaDataRequest;
use Byteplus\Service\Vod\Models\Response\DescribeVodRealtimeMediaDataResponse;

/**
 * Generated from protobuf service <code>byteplus/vod/service/service_vod.proto</code>
 */
class Vod extends V4Curl
{

    protected $apiList;

    public function __construct()
    {
        $this->region = func_get_arg(0);
        $this->apiList = VodOption::$apiList;
        parent::__construct($this->region);
    }

    /**
     * @throws Exception
     */
    protected function getConfig(string $region): array
    {
        try {
            return VodOption::getConfig($region);
        } catch (Exception $e) {
            print_r($e->getMessage());
            print_r($e->getTraceAsString());
            throw $e;
        }
    }

    /**
     * @throws Throwable
     */
    public function getPlayAuthToken(VodGetPlayInfoRequest $req, int $expireSeconds): string
    {
        try {
            $query = VodUtils::formatRequestParam($req);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($expireSeconds > 0) {
            $query["X-Expires"] = $expireSeconds;
        }
        $token = ["TokenVersion" => "V2"];
        $token["GetPlayInfoToken"] = parse_url($this->getRequestUrl("GetPlayInfo", ['query' => $query]))['query'];
        return base64_encode(json_encode($token));
    }

    /**
     * @throws Throwable
     */
    public function getThirdPartyDrmAuthToken(VodGetDrmLicenseRequest $req, int $expireSeconds): string
    {
        try {
            $query = VodUtils::formatRequestParam($req);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($expireSeconds > 0) {
            $query["X-Expires"] = $expireSeconds;
        }
        $token = ["TokenVersion" => "V2"];
        $token["GetThirdPartyDrmAuthToken"] = parse_url($this->getRequestUrl("GetDrmLicense", ['query' => $query]))['query'];
        return base64_encode(json_encode($token));
    }

    /**
     * @throws Throwable
     */
    public function getFairPlayCertUrl(string $certId, int $expireSeconds): string
    {
        if ($expireSeconds > 0) {
            $query["X-Expires"] = $expireSeconds;
        }
        $query["CertId"] = $certId;
        return html_entity_decode($this->getRequestUrl("GetFairPlayCert", ['query' => $query]));
    }

    /**
     * @throws Throwable
     */
    public function getSubtitleAuthToken(VodGetSubtitleInfoListRequest $req, int $expireSeconds): string
    {
        try {
            if($req->getVid() == ""){
                throw new Exception("empty vid");
            }
            $query = array("Vid"=>$req->getVid());
            $query["Status"] = "Published";
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($expireSeconds > 0) {
            $query["X-Expires"] = $expireSeconds;
        }
        $token["GetSubtitleAuthToken"] = parse_url($this->getRequestUrl("GetSubtitleInfoList", ['query' => $query]))['query'];
        return base64_encode(json_encode($token));
    }

    public function getUploadVideoAuth(): array
    {
        return $this->getUploadVideoAuthWithExpiredTime(60 * 60);
    }

    public function getUploadVideoAuthWithExpiredTime(int $expire): array
    {
        $actions = [ActionApplyUpload, ActionCommitUpload];
        $resources = [];
        $statement = $this->newAllowStatement($actions, $resources);
        $policy = [
            Statement => [$statement],
        ];
        return $this->signSts2($policy, $expire);
    }

    /**
     * @throws Throwable
     */
    public function getSHA1HlsDrmAuthToken(int $expireSeconds): string
    {
        return $this->createHlsDrmAuthToken("HMAC-SHA1", $expireSeconds);
    }

    /**
     * @throws Throwable
     */
    public function getPrivateDrmPlayAuthToken(VodGetPrivateDrmPlayAuthRequest $req, int $expireSeconds): string
    {
        try {
            $query = VodUtils::formatRequestParam($req);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($expireSeconds > 0) {
            $query["X-Expires"] = $expireSeconds;
        }
        return parse_url($this->getRequestUrl("GetPrivateDrmPlayAuth", ['query' => $query]))['query'];
    }

    /**
     * GetPlayInfo.
     *
     * @param $req VodGetPlayInfoRequest
     * @return VodGetPlayInfoResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function getPlayInfo (VodGetPlayInfoRequest $req): VodGetPlayInfoResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('GetPlayInfo', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodGetPlayInfoResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * GetPrivateDrmPlayAuth.
     *
     * @param $req VodGetPrivateDrmPlayAuthRequest
     * @return VodGetPrivateDrmPlayAuthResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function getPrivateDrmPlayAuth (VodGetPrivateDrmPlayAuthRequest $req): VodGetPrivateDrmPlayAuthResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('GetPrivateDrmPlayAuth', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodGetPrivateDrmPlayAuthResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * CreateHlsDecryptionKey.
     *
     * @param $req VodCreateHlsDecryptionKeyRequest
     * @return VodCreateHlsDecryptionKeyResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function createHlsDecryptionKey (VodCreateHlsDecryptionKeyRequest $req): VodCreateHlsDecryptionKeyResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('CreateHlsDecryptionKey', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodCreateHlsDecryptionKeyResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * GetPlayInfoWithLiveTimeShiftScene.
     *
     * @param $req VodGetPlayInfoWithLiveTimeShiftSceneRequest
     * @return VodGetPlayInfoWithLiveTimeShiftSceneResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function getPlayInfoWithLiveTimeShiftScene (VodGetPlayInfoWithLiveTimeShiftSceneRequest $req): VodGetPlayInfoWithLiveTimeShiftSceneResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('GetPlayInfoWithLiveTimeShiftScene', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodGetPlayInfoWithLiveTimeShiftSceneResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * UploadMediaByUrl.
     *
     * @param $req VodUrlUploadRequest
     * @return VodUrlUploadResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function uploadMediaByUrl (VodUrlUploadRequest $req): VodUrlUploadResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('UploadMediaByUrl', ['form_params' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodUrlUploadResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * QueryUploadTaskInfo.
     *
     * @param $req VodQueryUploadTaskInfoRequest
     * @return VodQueryUploadTaskInfoResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function queryUploadTaskInfo (VodQueryUploadTaskInfoRequest $req): VodQueryUploadTaskInfoResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('QueryUploadTaskInfo', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodQueryUploadTaskInfoResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * ApplyUploadInfo.
     *
     * @param $req VodApplyUploadInfoRequest
     * @return VodApplyUploadInfoResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function applyUploadInfo (VodApplyUploadInfoRequest $req): VodApplyUploadInfoResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('ApplyUploadInfo', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodApplyUploadInfoResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * CommitUploadInfo.
     *
     * @param $req VodCommitUploadInfoRequest
     * @return VodCommitUploadInfoResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function commitUploadInfo (VodCommitUploadInfoRequest $req): VodCommitUploadInfoResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('CommitUploadInfo', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodCommitUploadInfoResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * ListFileMetaInfosByFileNames.
     *
     * @param $req VodListFileMetaInfosByFileNamesRequest
     * @return VodListFileMetaInfosByFileNamesResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function listFileMetaInfosByFileNames (VodListFileMetaInfosByFileNamesRequest $req): VodListFileMetaInfosByFileNamesResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('ListFileMetaInfosByFileNames', ['form_params' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodListFileMetaInfosByFileNamesResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * UpdateMediaInfo.
     *
     * @param $req VodUpdateMediaInfoRequest
     * @return VodUpdateMediaInfoResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function updateMediaInfo (VodUpdateMediaInfoRequest $req): VodUpdateMediaInfoResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('UpdateMediaInfo', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodUpdateMediaInfoResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * UpdateMediaPublishStatus.
     *
     * @param $req VodUpdateMediaPublishStatusRequest
     * @return VodUpdateMediaPublishStatusResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function updateMediaPublishStatus (VodUpdateMediaPublishStatusRequest $req): VodUpdateMediaPublishStatusResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('UpdateMediaPublishStatus', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodUpdateMediaPublishStatusResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * UpdateMediaStorageClass.
     *
     * @param $req VodUpdateMediaStorageClassRequest
     * @return VodUpdateMediaStorageClassResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function updateMediaStorageClass (VodUpdateMediaStorageClassRequest $req): VodUpdateMediaStorageClassResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('UpdateMediaStorageClass', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodUpdateMediaStorageClassResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * GetMediaInfos.
     *
     * @param $req VodGetMediaInfosRequest
     * @return VodGetMediaInfosResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function getMediaInfos (VodGetMediaInfosRequest $req): VodGetMediaInfosResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('GetMediaInfos', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodGetMediaInfosResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * GetRecommendedPoster.
     *
     * @param $req VodGetRecommendedPosterRequest
     * @return VodGetRecommendedPosterResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function getRecommendedPoster (VodGetRecommendedPosterRequest $req): VodGetRecommendedPosterResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('GetRecommendedPoster', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodGetRecommendedPosterResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * DeleteMedia.
     *
     * @param $req VodDeleteMediaRequest
     * @return VodDeleteMediaResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function deleteMedia (VodDeleteMediaRequest $req): VodDeleteMediaResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('DeleteMedia', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodDeleteMediaResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * DeleteTranscodes.
     *
     * @param $req VodDeleteTranscodesRequest
     * @return VodDeleteTranscodesResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function deleteTranscodes (VodDeleteTranscodesRequest $req): VodDeleteTranscodesResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('DeleteTranscodes', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodDeleteTranscodesResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * GetFileInfos.
     *
     * @param $req VodGetFileInfosRequest
     * @return VodGetFileInfosResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function getFileInfos (VodGetFileInfosRequest $req): VodGetFileInfosResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('GetFileInfos', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodGetFileInfosResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * DeleteMediaTosFile.
     *
     * @param $req VodDeleteMediaTosFileRequest
     * @return VodDeleteMediaTosFileResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function deleteMediaTosFile (VodDeleteMediaTosFileRequest $req): VodDeleteMediaTosFileResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('DeleteMediaTosFile', ['form_params' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodDeleteMediaTosFileResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * GetMediaList.
     *
     * @param $req VodGetMediaListRequest
     * @return VodGetMediaListResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function getMediaList (VodGetMediaListRequest $req): VodGetMediaListResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('GetMediaList', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodGetMediaListResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * GetSubtitleInfoList.
     *
     * @param $req VodGetSubtitleInfoListRequest
     * @return VodGetSubtitleInfoListResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function getSubtitleInfoList (VodGetSubtitleInfoListRequest $req): VodGetSubtitleInfoListResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('GetSubtitleInfoList', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodGetSubtitleInfoListResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * UpdateSubtitleStatus.
     *
     * @param $req VodUpdateSubtitleStatusRequest
     * @return VodUpdateSubtitleStatusResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function updateSubtitleStatus (VodUpdateSubtitleStatusRequest $req): VodUpdateSubtitleStatusResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('UpdateSubtitleStatus', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodUpdateSubtitleStatusResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * UpdateSubtitleInfo.
     *
     * @param $req VodUpdateSubtitleInfoRequest
     * @return VodUpdateSubtitleInfoResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function updateSubtitleInfo (VodUpdateSubtitleInfoRequest $req): VodUpdateSubtitleInfoResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('UpdateSubtitleInfo', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodUpdateSubtitleInfoResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * CreatePlaylist.
     *
     * @param $req VodCreatePlaylistRequest
     * @return VodCreatePlaylistResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function createPlaylist (VodCreatePlaylistRequest $req): VodCreatePlaylistResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('CreatePlaylist', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodCreatePlaylistResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * GetPlaylists.
     *
     * @param $req VodGetPlaylistsRequest
     * @return VodGetPlaylistsResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function getPlaylists (VodGetPlaylistsRequest $req): VodGetPlaylistsResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('GetPlaylists', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodGetPlaylistsResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * UpdatePlaylist.
     *
     * @param $req VodUpdatePlaylistRequest
     * @return VodUpdatePlaylistResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function updatePlaylist (VodUpdatePlaylistRequest $req): VodUpdatePlaylistResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('UpdatePlaylist', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodUpdatePlaylistResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * DeletePlaylist.
     *
     * @param $req VodDeletePlaylistRequest
     * @return VodDeletePlaylistResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function deletePlaylist (VodDeletePlaylistRequest $req): VodDeletePlaylistResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('DeletePlaylist', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodDeletePlaylistResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * CreateVideoClassification.
     *
     * @param $req VodCreateVideoClassificationRequest
     * @return VodCreateVideoClassificationResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function createVideoClassification (VodCreateVideoClassificationRequest $req): VodCreateVideoClassificationResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('CreateVideoClassification', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodCreateVideoClassificationResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * UpdateVideoClassification.
     *
     * @param $req VodUpdateVideoClassificationRequest
     * @return VodUpdateVideoClassificationResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function updateVideoClassification (VodUpdateVideoClassificationRequest $req): VodUpdateVideoClassificationResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('UpdateVideoClassification', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodUpdateVideoClassificationResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * DeleteVideoClassification.
     *
     * @param $req VodDeleteVideoClassificationRequest
     * @return VodDeleteVideoClassificationResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function deleteVideoClassification (VodDeleteVideoClassificationRequest $req): VodDeleteVideoClassificationResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('DeleteVideoClassification', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodDeleteVideoClassificationResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * ListVideoClassifications.
     *
     * @param $req VodListVideoClassificationsRequest
     * @return VodListVideoClassificationsResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function listVideoClassifications (VodListVideoClassificationsRequest $req): VodListVideoClassificationsResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('ListVideoClassifications', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodListVideoClassificationsResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * ListSnapshots.
     *
     * @param $req VodListSnapshotsRequest
     * @return VodListSnapshotsResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function listSnapshots (VodListSnapshotsRequest $req): VodListSnapshotsResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('ListSnapshots', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodListSnapshotsResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * StartWorkflow.
     *
     * @param $req VodStartWorkflowRequest
     * @return VodStartWorkflowResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function startWorkflow (VodStartWorkflowRequest $req): VodStartWorkflowResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('StartWorkflow', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodStartWorkflowResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * RetrieveTranscodeResult.
     *
     * @param $req VodRetrieveTranscodeResultRequest
     * @return VodRetrieveTranscodeResultResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function retrieveTranscodeResult (VodRetrieveTranscodeResultRequest $req): VodRetrieveTranscodeResultResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('RetrieveTranscodeResult', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodRetrieveTranscodeResultResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * GetWorkflowExecution.
     *
     * @param $req VodGetWorkflowExecutionStatusRequest
     * @return VodGetWorkflowExecutionStatusResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function GetWorkflowExecution (VodGetWorkflowExecutionStatusRequest $req): VodGetWorkflowExecutionStatusResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('GetWorkflowExecution', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodGetWorkflowExecutionStatusResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * CreateSpace.
     *
     * @param $req VodCreateSpaceRequest
     * @return VodCreateSpaceResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function createSpace (VodCreateSpaceRequest $req): VodCreateSpaceResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('CreateSpace', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodCreateSpaceResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * ListSpace.
     *
     * @param $req VodListSpaceRequest
     * @return VodListSpaceResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function listSpace (VodListSpaceRequest $req): VodListSpaceResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('ListSpace', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodListSpaceResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * GetSpaceDetail.
     *
     * @param $req VodGetSpaceDetailRequest
     * @return VodGetSpaceDetailResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function getSpaceDetail (VodGetSpaceDetailRequest $req): VodGetSpaceDetailResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('GetSpaceDetail', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodGetSpaceDetailResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * UpdateSpaceUploadConfig.
     *
     * @param $req VodUpdateSpaceUploadConfigRequest
     * @return VodUpdateSpaceUploadConfigResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function updateSpaceUploadConfig (VodUpdateSpaceUploadConfigRequest $req): VodUpdateSpaceUploadConfigResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('UpdateSpaceUploadConfig', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodUpdateSpaceUploadConfigResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * DescribeVodSpaceStorageData.
     *
     * @param $req VodDescribeVodSpaceStorageDataRequest
     * @return VodDescribeVodSpaceStorageDataResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function describeVodSpaceStorageData (VodDescribeVodSpaceStorageDataRequest $req): VodDescribeVodSpaceStorageDataResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('DescribeVodSpaceStorageData', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodDescribeVodSpaceStorageDataResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * StartDomain.
     *
     * @param $req VodStartDomainRequest
     * @return VodStartDomainResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function startDomain (VodStartDomainRequest $req): VodStartDomainResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('StartDomain', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodStartDomainResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * StopDomain.
     *
     * @param $req VodStopDomainRequest
     * @return VodStopDomainResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function stopDomain (VodStopDomainRequest $req): VodStopDomainResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('StopDomain', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodStopDomainResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * AddDomainToScheduler.
     *
     * @param $req VodAddDomainToSchedulerRequest
     * @return VodAddDomainToSchedulerResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function addDomainToScheduler (VodAddDomainToSchedulerRequest $req): VodAddDomainToSchedulerResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('AddDomainToScheduler', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodAddDomainToSchedulerResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * RemoveDomainFromScheduler.
     *
     * @param $req VodRemoveDomainFromSchedulerRequest
     * @return VodRemoveDomainFromSchedulerResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function removeDomainFromScheduler (VodRemoveDomainFromSchedulerRequest $req): VodRemoveDomainFromSchedulerResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('RemoveDomainFromScheduler', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodRemoveDomainFromSchedulerResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * UpdateDomainPlayRule.
     *
     * @param $req VodUpdateDomainPlayRuleRequestRequest
     * @return VodUpdateDomainPlayRuleResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function updateDomainPlayRule (VodUpdateDomainPlayRuleRequestRequest $req): VodUpdateDomainPlayRuleResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('UpdateDomainPlayRule', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodUpdateDomainPlayRuleResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * ListDomain.
     *
     * @param $req VodListDomainRequest
     * @return VodListDomainResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function listDomain (VodListDomainRequest $req): VodListDomainResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('ListDomain', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodListDomainResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * CreateCdnRefreshTask.
     *
     * @param $req VodCreateCdnRefreshTaskRequest
     * @return VodCreateCdnRefreshTaskResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function createCdnRefreshTask (VodCreateCdnRefreshTaskRequest $req): VodCreateCdnRefreshTaskResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('CreateCdnRefreshTask', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodCreateCdnRefreshTaskResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * CreateCdnPreloadTask.
     *
     * @param $req VodCreateCdnPreloadTaskRequest
     * @return VodCreateCdnPreloadTaskResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function createCdnPreloadTask (VodCreateCdnPreloadTaskRequest $req): VodCreateCdnPreloadTaskResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('CreateCdnPreloadTask', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodCreateCdnPreloadTaskResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * ListCdnTasks.
     *
     * @param $req VodListCdnTasksRequest
     * @return VodListCdnTasksResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function listCdnTasks (VodListCdnTasksRequest $req): VodListCdnTasksResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('ListCdnTasks', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodListCdnTasksResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * ListCdnAccessLog.
     *
     * @param $req VodListCdnAccessLogRequest
     * @return VodListCdnAccessLogResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function listCdnAccessLog (VodListCdnAccessLogRequest $req): VodListCdnAccessLogResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('ListCdnAccessLog', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodListCdnAccessLogResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * ListCdnTopAccessUrl.
     *
     * @param $req VodListCdnTopAccessUrlRequest
     * @return VodListCdnTopAccessUrlResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function listCdnTopAccessUrl (VodListCdnTopAccessUrlRequest $req): VodListCdnTopAccessUrlResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('ListCdnTopAccessUrl', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodListCdnTopAccessUrlResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * DescribeVodDomainBandwidthData.
     *
     * @param $req VodDescribeVodDomainBandwidthDataRequest
     * @return VodDescribeVodDomainBandwidthDataResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function describeVodDomainBandwidthData (VodDescribeVodDomainBandwidthDataRequest $req): VodDescribeVodDomainBandwidthDataResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('DescribeVodDomainBandwidthData', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodDescribeVodDomainBandwidthDataResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * ListCdnUsageData.
     *
     * @param $req VodListCdnUsageDataRequest
     * @return VodCdnStatisticsCommonResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function listCdnUsageData (VodListCdnUsageDataRequest $req): VodCdnStatisticsCommonResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('ListCdnUsageData', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodCdnStatisticsCommonResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * ListCdnUsageDataDetail.
     *
     * @param $req VodListCdnUsageDataDetailRequest
     * @return VodListCdnUsageDataDetailResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function listCdnUsageDataDetail (VodListCdnUsageDataDetailRequest $req): VodListCdnUsageDataDetailResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('ListCdnUsageDataDetail', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodListCdnUsageDataDetailResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * ListCdnStatusData.
     *
     * @param $req VodListCdnStatusDataRequest
     * @return VodCdnStatisticsCommonResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function listCdnStatusData (VodListCdnStatusDataRequest $req): VodCdnStatisticsCommonResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('ListCdnStatusData', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodCdnStatisticsCommonResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * ListCdnStatusDataDetail.
     *
     * @param $req VodListCdnStatusDataDetailRequest
     * @return VodListCdnStatusDataDetailResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function listCdnStatusDataDetail (VodListCdnStatusDataDetailRequest $req): VodListCdnStatusDataDetailResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('ListCdnStatusDataDetail', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodListCdnStatusDataDetailResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * DescribeIpInfo.
     *
     * @param $req VodDescribeIPInfoRequest
     * @return VodDescribeIPInfoResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function describeIpInfo (VodDescribeIPInfoRequest $req): VodDescribeIPInfoResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('DescribeIpInfo', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodDescribeIPInfoResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * DescribeVodDomainTrafficData.
     *
     * @param $req VodDescribeVodDomainTrafficDataRequest
     * @return VodDescribeVodDomainTrafficDataResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function describeVodDomainTrafficData (VodDescribeVodDomainTrafficDataRequest $req): VodDescribeVodDomainTrafficDataResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('DescribeVodDomainTrafficData', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodDescribeVodDomainTrafficDataResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * ListCdnPvData.
     *
     * @param $req VodListCdnPvDataRequest
     * @return VodCdnStatisticsCommonResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function listCdnPvData (VodListCdnPvDataRequest $req): VodCdnStatisticsCommonResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('ListCdnPvData', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodCdnStatisticsCommonResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * SubmitBlockTasks.
     *
     * @param $req VodSubmitBlockTasksRequest
     * @return VodSubmitBlockTasksResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function submitBlockTasks (VodSubmitBlockTasksRequest $req): VodSubmitBlockTasksResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('SubmitBlockTasks', ['form_params' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodSubmitBlockTasksResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * GetContentBlockTasks.
     *
     * @param $req VodGetContentBlockTasksRequest
     * @return VodGetContentBlockTasksResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function getContentBlockTasks (VodGetContentBlockTasksRequest $req): VodGetContentBlockTasksResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('GetContentBlockTasks', ['form_params' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodGetContentBlockTasksResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * CreateDomain.
     *
     * @param $req VodCreateDomainV2Request
     * @return VodCreateDomainV2Response
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function createDomain (VodCreateDomainV2Request $req): VodCreateDomainV2Response
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('CreateDomain', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodCreateDomainV2Response();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * UpdateDomainExpire.
     *
     * @param $req VodUpdateDomainExpireV2Request
     * @return VodUpdateDomainExpireV2Response
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function updateDomainExpire (VodUpdateDomainExpireV2Request $req): VodUpdateDomainExpireV2Response
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('UpdateDomainExpire', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodUpdateDomainExpireV2Response();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * AddOrUpdateCertificate.
     *
     * @param $req AddOrUpdateCertificateV2Request
     * @return AddOrUpdateCertificateV2Response
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function addOrUpdateCertificate (AddOrUpdateCertificateV2Request $req): AddOrUpdateCertificateV2Response
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('AddOrUpdateCertificate', ['form_params' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new AddOrUpdateCertificateV2Response();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * AddCallbackSubscription.
     *
     * @param $req VodAddCallbackSubscriptionRequest
     * @return VodAddCallbackSubscriptionResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function addCallbackSubscription (VodAddCallbackSubscriptionRequest $req): VodAddCallbackSubscriptionResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('AddCallbackSubscription', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodAddCallbackSubscriptionResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * SetCallbackEvent.
     *
     * @param $req VodSetCallbackEventRequest
     * @return VodSetCallbackEventResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function setCallbackEvent (VodSetCallbackEventRequest $req): VodSetCallbackEventResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('SetCallbackEvent', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodSetCallbackEventResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * DescribeVodSpaceTranscodeData.
     *
     * @param $req DescribeVodSpaceTranscodeDataRequest
     * @return DescribeVodSpaceTranscodeDataResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function describeVodSpaceTranscodeData (DescribeVodSpaceTranscodeDataRequest $req): DescribeVodSpaceTranscodeDataResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('DescribeVodSpaceTranscodeData', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new DescribeVodSpaceTranscodeDataResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * DescribeVodSpaceSubtitleStatisData.
     *
     * @param $req DescribeVodSpaceSubtitleStatisDataRequest
     * @return DescribeVodSpaceSubtitleStatisDataResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function describeVodSpaceSubtitleStatisData (DescribeVodSpaceSubtitleStatisDataRequest $req): DescribeVodSpaceSubtitleStatisDataResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('DescribeVodSpaceSubtitleStatisData', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new DescribeVodSpaceSubtitleStatisDataResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * DescribeVodSnapshotData.
     *
     * @param $req DescribeVodSnapshotDataRequest
     * @return DescribeVodSnapshotDataResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function describeVodSnapshotData (DescribeVodSnapshotDataRequest $req): DescribeVodSnapshotDataResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('DescribeVodSnapshotData', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new DescribeVodSnapshotDataResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * DescribeVodSpaceStorageDataFD.
     *
     * @param $req DescribeVodSpaceStorageDataFDRequest
     * @return DescribeVodSpaceStorageDataFDResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function describeVodSpaceStorageDataFD (DescribeVodSpaceStorageDataFDRequest $req): DescribeVodSpaceStorageDataFDResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('DescribeVodSpaceStorageDataFD', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new DescribeVodSpaceStorageDataFDResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * DescribeVodEnhanceImageData.
     *
     * @param $req DescribeVodEnhanceImageDataRequest
     * @return DescribeVodEnhanceImageDataResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function describeVodEnhanceImageData (DescribeVodEnhanceImageDataRequest $req): DescribeVodEnhanceImageDataResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('DescribeVodEnhanceImageData', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new DescribeVodEnhanceImageDataResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * DescribeVodPlayedStatisData.
     *
     * @param $req DescribeVodPlayedStatisDataRequest
     * @return DescribeVodPlayedStatisDataResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function describeVodPlayedStatisData (DescribeVodPlayedStatisDataRequest $req): DescribeVodPlayedStatisDataResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('DescribeVodPlayedStatisData', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new DescribeVodPlayedStatisDataResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * DescribeVodMostPlayedStatisData.
     *
     * @param $req DescribeVodMostPlayedStatisDataRequest
     * @return DescribeVodMostPlayedStatisDataResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function describeVodMostPlayedStatisData (DescribeVodMostPlayedStatisDataRequest $req): DescribeVodMostPlayedStatisDataResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('DescribeVodMostPlayedStatisData', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new DescribeVodMostPlayedStatisDataResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * DescribeVodRealtimeMediaData.
     *
     * @param $req DescribeVodRealtimeMediaDataRequest
     * @return DescribeVodRealtimeMediaDataResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function describeVodRealtimeMediaData (DescribeVodRealtimeMediaDataRequest $req): DescribeVodRealtimeMediaDataResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('DescribeVodRealtimeMediaData', ['query' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new DescribeVodRealtimeMediaDataResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

}  // end of service
